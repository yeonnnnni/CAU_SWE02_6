model 계층

Horse.java
역할: 말을 표현하는 객체.
책임: 현재 위치(Node), 완료 여부 등을 보관.
설계 원칙: SRP(단일 책임 원칙) — 말의 상태만 관리.

Node.java
역할: 윷판의 위치 노드.
책임: 다음 노드 리스트, 분기 여부, 중앙 노드 표시 여부 등을 관리.
설계 원칙: SRP + OCP — 구조 확장에 유연함.

DiceManager.java
역할: 윷을 던지고 결과를 생성하는 객체.
책임: 무작위로 윷 결과를 반환.
설계 원칙: SRP + DIP — 난수 생성은 내부에 숨기고, 외부에는 결과만 노출.

YutResult.java
역할: 윷 결과를 표현하는 Enum.
책임: 각 윷 결과에 해당하는 이동 칸 수 포함.
설계 원칙: SRP — 도메인 개념을 Enum으로 명확히 표현.


view 계층

BoardPanel.java
역할: 윷판의 시각적 표현.
책임: 5x5 그리드 레이아웃에 칸을 배치하고 말의 위치를 표시.
설계 원칙: SRP — 보드 시각화 전용.

DicePanel.java
역할: 사용자 인터페이스에서 윷 던지기 버튼을 제공.
책임: 버튼 클릭 시 윷 결과를 보여주고 GameManager에 전달.
설계 원칙: SRP + LoD(묻지 마 원칙) — 내부 로직은 모르고 GameManager만 호출.

MainFrame.java
역할: 전체 UI 프레임.
책임: DicePanel과 BoardPanel을 조립하고 GameManager를 초기화.
설계 원칙: SRP — UI 초기화 및 패널 배치 전담.


controller 계층

GameManager.java
역할: 게임의 흐름을 전반적으로 제어하는 중심 클래스.
책임: 게임 초기화, 윷 결과 처리, 말 이동, 승리 조건 체크 등.
설계 원칙: SRP + OCP — 로직 처리 중심, UI와 분리된 구조 유지.

TurnManager.java
역할: 턴 관리 전담 클래스.
책임: 현재 플레이어 추적 및 턴 전환 처리.
설계 원칙: SRP — 플레이어 순서 관리만 담당.


Entry Point
App.java
역할: 프로그램 실행 진입점.
책임: Swing UI를 시작하고 MainFrame을 호출.
설계 원칙: SRP — 실행만 담당하고 로직은 MainFrame에 위임.

적용된 설계 원칙 요약
SRP (단일 책임 원칙): 모든 클래스가 하나의 책임만 갖도록 설계.
OCP (개방-폐쇄 원칙): Node 구조 등은 기능 추가 시 수정 없이 확장 가능.
DIP (의존 역전 원칙): DiceManager는 내부 구현을 감추고 결과만 외부에 제공.
LoD (묻지 마 원칙): View는 내부 로직을 모르고 Controller에만 요청 전달.
